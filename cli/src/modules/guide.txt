Please note - this is an alpha version of the software, and not all features are currently functional.

If you are using the desktop or web version of this software, you can adjust the terminal font size with Ctrl+'+' or Ctrl+'-' (use Command on MacOS).

For the desktop version, you can press Ctrl+M (Command on MacOS) to bring up metrics.

Type `help` to view the full list of commands. To exit the application, type `exit`. On Windows, you can also use `Alt+F4`, and on MacOS, use `Command+Q` to exit.

---

Before starting, you need to configure the default network setting. Currently, three networks are available: `mainnet`, `testnet-1`, and `testnet-11`. While this software is in the alpha stage, you should avoid using it on the mainnet. For experimentation, select `testnet-1` by entering `network testnet-1`.

The `server` command configures the target server. You can connect to any Rusty Karlsen node with User RPC enabled using `--rpclisten-borsh=public`. If running the node within KOS, it is restricted to listen to a local IP address.

Both the network and server settings are stored in the application and are used when running a local node or connecting to a remote one.

---

Use `node start` to start the node. Type `node` to view an overview of commands. The `node mute` command toggles node log output (alternatively, you can use `node logs`). The `node select` command allows you to choose between locally installed versions if running in a development environment. You can also specify an absolute path by typing `node select <path to rusty karlsen binary>`.

For developers, the `node select` command scans the 'target' folder for debug and release builds, allowing you to switch between builds at runtime.

Once your node is running, connect to it using the `connect` command.

If the `server` setting is configured to your local host when starting the node, the `connect` action will occur automatically.

`wallet create [<name>]` - Use this command to create a local wallet. The `<name>` argument is optional (the default wallet name is "karlsen"), allowing you to create multiple named wallets. Only one wallet can be open at a time. Remember, a wallet can have multiple accounts, so you may only need one wallet unless you want to separate wallets for personal and business use (though you can also create isolated accounts within a wallet).

Be sure to record your mnemonic, even when working with a testnet, to avoid losing your testnet KLS.

`open <name>` - Opens the wallet (the wallet is opened automatically after creation).

`list` - Lists all wallet accounts and their balances.

`select <account-name>` - Selects an active account. The `<account-name>` can be the first few letters of the account name or ID.

`account create bip32 [<name>]` - Creates additional HD wallet accounts linked to the wallet's default private key.

`address` - Displays the address of the selected account.

Note - you can click on the address to copy it to the clipboard. When on the mainnet, Ctrl+Clicking on addresses, transactions, and block hashes will open a new browser window with an explorer.

Before transacting: The `mute` option (enabled by default) toggles mute on/off. Mute controls terminal output of internal framework events. Rust and JavaScript/TypeScript applications integrating with this platform update their state by monitoring event notifications. Mute allows you to see these events in the terminal. When mute is off, all events are displayed. When mute is on, use the `track` command to enable specific event notifications.

`transfer <account-name> <amount>` - Transfers funds from the active account to a different account. For example, 'transfer p 1' transfers 1 KLS from the selected account to an account starting with 'p'.

`send <address> <amount>` - Sends funds to a specified address.

`estimate <amount>` - Provides a fee and UTXO consumption estimate for a transaction of a specified amount.

`sweep` - Sweeps account UTXOs to reduce their size.

`history list` - Displays a list of previous account transactions.

`history details` - Displays previous account transactions with extended information.

Once your node is synced, you can begin mining.

`monitor` - A test screen environment that periodically updates account balances.

`rpc` - Allows you to execute RPC methods against the node (note that not all methods are currently available).